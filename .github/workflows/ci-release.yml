name: CI & Release

on:
  push:
    branches: [ "main", "develop" ] # Adjust to your main development branches
    tags:
      - \'v*.*.*\' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ "main", "develop" ] # Adjust to your main development branches

jobs:
  test:
    name: Run Tests (PHP 8.1)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none # Set to xdebug or pcov if you want coverage reports

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run tests
        run: vendor/bin/phpunit --debug

  publish:
    name: Publish to Packagist
    needs: test # Ensure tests pass before publishing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes starting with 'v'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Use the minimum supported PHP version for publishing
          coverage: none

      - name: Get Composer Cache Directory
        id: composer-cache-publish
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
          
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-publish.outputs.dir }}
          key: ${{ runner.os }}-composer-publish-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-publish-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-dev # No dev dependencies for release

      - name: Update Packagist
        if: success()
        env:
          PACKAGIST_API_TOKEN: ${{ secrets.PACKAGIST_API_TOKEN }}
          PACKAGIST_USER_NAME: "lucianotonet" # Replace with your Packagist username or use a secret
          COMPOSER_FILE_PATH: "./composer.json" # Default path
        run: |
          sudo apt-get install -y curl jq
          composer_name=$(jq -r \'.name\' "$COMPOSER_FILE_PATH")
          echo "Notifying Packagist about new version for $composer_name..."
          payload="{\"repository\":{\"url\":\"https://github.com/${GITHUB_REPOSITORY}\"}}"
          response_code=$(curl -w "%{http_code}" -X POST \\
            -H "Content-type:application/json" \\
            "https://packagist.org/api/update-package?username=${PACKAGIST_USER_NAME}&apiToken=${PACKAGIST_API_TOKEN}" \\
            -d "$payload" \\
            -o response.txt)
          cat response.txt
          if [ "$response_code" -ne 202 ] && [ "$response_code" -ne 200 ]; then
            echo "Error updating Packagist: HTTP $response_code"
            exit 1
          fi
          echo "Packagist updated successfully for $composer_name." 